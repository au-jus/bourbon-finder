AWSTemplateFormatVersion: '2010-09-09'
Description: bourbon-finder

Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: bourbon-finder-iam-role

      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:

          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole

      Policies:
        - PolicyName: BourbonFinder-BasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:us-east-1:{ACCOUNT_ID}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:us-east-1:{ACCOUNT_ID}:log-group:/aws/lambda/bourbon-finder:*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: arn:aws:sns:us-east-1:{ACCOUNT_ID}:bourbon-notification


  # S3Bucket:
  #   Type: AWS::S3::Bucket
  #   DeletionPolicy: Retain
  #   Properties:
  #     BucketName: your-s3-bucket-name

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bourbon-finder
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Role:
        Fn::GetAtt:
          - IAMRole
          - Arn
      Timeout: 300
      Code:
        S3Bucket: your-s3-bucket-name
        S3Key: deployment.zip

# EventBridge Rule and Permission

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: bourbon-schedule
      ScheduleExpression: cron(0 5 ? * MON *)
      State: ENABLED
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "Lambda"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

# SNSTopic, Permission, and Subscription

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: bourbon-notification
      DisplayName: bourbon-notification
      Subscription:
        - Protocol: email
          Endpoint: {your-email@domain.com}

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Action:
              - SNS:Publish
              - SNS:RemovePermission
              - SNS:SetTopicAttributes
              - SNS:DeleteTopic
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:AddPermission
              - SNS:Subscribe
            Resource: !Ref SNSTopic
            Principal:
              AWS: '*'
            Condition:
              StringEquals:
                AWS:SourceOwner: {ACCOUNT_ID}